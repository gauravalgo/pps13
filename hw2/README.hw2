
HW2.


Assignment 1:
a)
Starrt with:

make clean && make && ./matrixSum-openmp.o size workers

size is the matrix size.
workers = Number of parallell exections.

Resultat:

The assignment was for the sequential solution to take 1-2 seconds, but i never reach that amout of time.


Matrix Size:      10          1000        10000
Workers   
1 				1.4*E^-5  		0.002 		0.191485
2 				1.3*E^-5 		0.0013 		0.15032
3 				1.7*E^-5  		0.0013 		0.121889
4				1.5*E^-5 		0.007 		0.1054

Some sample results:
make clean && make && ./matrixSum-openmp.o 10000 4
it took 0.102081 seconds

make clean && make && ./matrixSum-openmp.o 10000 1
it took 0.186508 seconds

Discussion:
Dealing with small numbers we do not get a decrease in executiontime due to the fact that they have an inherit cost to start. 

Experiments on bigger matrices show a decrease in time!

Assignment 3:
PalindromicWords.
=================

How to run it:
make clean && make all && cat words | ./palindromic.o 4 10000
first parameter (4) is number of threads to use.
The second parameter (10000) is the size of the words list to use. If this is set below 
lower then the total amount of rows in the file words, we stop parsing after this 
amount of words.

Results:
For 3 runs for each settings, these are the average score. 
These tests was performed on my laptop, with the spec seen below:

cat /proc/cupinfo
processor	: 3
vendor_id	: GenuineIntel
cpu family	: 6
model		: 58
model name	: Intel(R) Core(TM) i5-3317U CPU @ 1.70GHz

Getting all palendromic words, inc draw and ward:

DictSize:   1k  		10k 		All(ca 25k)
Workers:
1 			0.03877 	3.36065  	21.4624
2 			0.02528 	1.73229 	10.7681
4  			0.03035		1.32983		8.16470
8 			0.05549 	2.30911		11.929733


Getting only one of draw and ward.
DictSize:   1000 		10.000			MAX(ca 25000)
Workers:
1 			0.0167 		1.10948  		7.08557
2 			0.0056 		0.60905		 	3.87641
3 			0.0054		0.54587 		3.44525
4 			0.0045 		0.48727 		3.19977
16 			0.0823 		1.30995 		5.93965


Conclusions:

We can be pretty sure that our threads work, we can see an improvement. 
We also see that when we exceed the amount of cores out processor has we do not 
get any further improvement. This is due to the overhead of creating,
and organizing new threads/processes.